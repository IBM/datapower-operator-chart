apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.11.3
    datapower.ibm.com/operator-version: 1.8.1
  creationTimestamp: null
  labels:
    app.kubernetes.io/instance: datapower-operator
    app.kubernetes.io/managed-by: datapower-operator
    app.kubernetes.io/name: datapowerrollouts.datapower.ibm.com
  name: datapowerrollouts.datapower.ibm.com
spec:
  group: datapower.ibm.com
  names:
    categories:
    - all
    - apic
    - integration
    - cp4i
    kind: DataPowerRollout
    listKind: DataPowerRolloutList
    plural: datapowerrollouts
    shortNames:
    - dpr
    singular: datapowerrollout
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - description: Next partition to be rolled out
      jsonPath: .spec.nextPartition
      name: Next Partition
      type: number
    - description: Partition ready to be rolled out
      jsonPath: .status.readyPartition
      name: Ready Partition
      type: number
    - description: Work is in-progress
      jsonPath: .status.workInProgress
      name: Work In-Progress
      type: boolean
    - description: Work is complete
      jsonPath: .status.workComplete
      name: Work Complete
      type: boolean
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    name: v1beta1
    schema:
      openAPIV3Schema:
        description: DataPowerRollout is an internal API for orchestrating rollouts
          of the managed DataPower StatefulSet. This product is not deployable standalone
          and it is part of the LICCR already accepted.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: DataPowerRolloutSpec defines the desired state of DataPowerRollout
            properties:
              nextPartition:
                description: NextPartition is the next desired partition for the StatefulSet
                  rolling update. This property is set by the DataPowerService controller.
                format: int32
                minimum: 0
                type: integer
            required:
            - nextPartition
            type: object
          status:
            description: DataPowerRolloutStatus defines the observed state of DataPowerRollout
            properties:
              readyPartition:
                description: ReadyPartition is the partition which is ready to be
                  rolled out. This property is set by the DataPowerRollout controller,
                  and is intended to be read by the DataPowerService controller as
                  the mechanism to move forward the partition on the managed StatefulSet.
                format: int32
                minimum: 0
                type: integer
              workComplete:
                description: WorkComplete is true when all work is complete for the
                  rollout. This means that the StatefulSet's partition has progressed
                  to 0, and the lowest ordinal pod has been made primary post-rollout.
                type: boolean
              workInProgress:
                description: WorkInProgress is true when there is an active routine
                  performing work on the DataPower pods. Work could include reading
                  state from the cluster, as well as mutating state within the pods,
                  such as switching gateway-peering primaries.
                type: boolean
            required:
            - readyPartition
            - workComplete
            - workInProgress
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: null
  storedVersions: null
